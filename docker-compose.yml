services:
  markui:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      # Server Settings
      - HOST=127.0.0.1
      - PORT=8000
      - DEBUG=false
      
      # Redis Settings
      - REDIS_URL=redis://redis:6379
      
      # File Storage Settings
      - UPLOAD_DIR=uploads
      - OUTPUT_DIR=outputs
      - STATIC_DIR=static
      - MAX_FILE_SIZE=104857600
      
      # LLM Service API Keys (set these or use .env file)
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
      
      # OpenAI Settings
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      
      # Claude Settings
      - CLAUDE_MODEL_NAME=${CLAUDE_MODEL_NAME:-claude-3-sonnet-20240229}
      
      # Ollama Settings
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://localhost:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.2}
      
      # Google Vertex AI Settings
      - VERTEX_PROJECT_ID=${VERTEX_PROJECT_ID:-}
      
      # Security Settings
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # CORS Settings
      - ALLOWED_ORIGINS=["http://localhost", "http://localhost:80"]
      
      # Marker Library Settings
      - TORCH_DEVICE=${TORCH_DEVICE:-auto}
      
      # PDF Storage Management
      - MAX_STORED_PDFS=${MAX_STORED_PDFS:-50}
      - MAX_STORAGE_SIZE_MB=${MAX_STORAGE_SIZE_MB:-5000}
      - MIN_RETENTION_HOURS=${MIN_RETENTION_HOURS:-24}
      - CLEANUP_BATCH_SIZE=${CLEANUP_BATCH_SIZE:-10}
      - STORAGE_CHECK_INTERVAL_MINUTES=${STORAGE_CHECK_INTERVAL_MINUTES:-30}
    
    volumes:
      - markui_uploads:/app/backend/uploads
      - markui_outputs:/app/backend/outputs
      - markui_static:/app/backend/static
    
    depends_on:
      - redis
    
    restart: unless-stopped
    
    networks:
      - markui-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - markui-network
    command: redis-server --appendonly yes

volumes:
  markui_uploads:
  markui_outputs:
  markui_static:
  redis_data:

networks:
  markui-network:
    driver: bridge 